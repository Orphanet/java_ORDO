package orph2obo;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * Class representing the information in a RareDisease XML stanza. See the code for the class
 * OrphaXRefXMLParser/OrphaGenesXMLParser/OrphaEpidemiologyParser/OrphadataClassificationXMLParser
 *  to get an idea of how objects of this class are constructed.
 */
public class RareDisease {
    
    /** The name of the disease */
    private String name=null;
    /**Disorder id- the internal id for orphanet*/
    private String orphID = null;
    /** The orphanet ID for this rare disease*/
    private String orphanum=null;
    /** The reference for this rare disease*/
    private String reference=null;
    /** Prevalence name for that particulare disease that is 1/50,000 etc */
    private String prevalence = null;
    /**AgeofOnset for a disease*/
    private String ageOfOnset = null;
    /**AgeOfDeath for a disease*/
    private String ageOfDeath = null;
    /**Count of exrefs for genes*/
    //this is necessary to get the division for the number of xrefs a gene is associated with
    private ArrayList<String> count;
    /**list of gene symbol*/
    private ArrayList<String> symbol = null;
    /**Mode of Inheritance*/
    private ArrayList<String> inheritance = null;
   /**Synonym for disease*/
    private ArrayList<String> synonym = null;
    /** each disorder has one expert link for this disease */
    private String expert_link_list=null;
    /** List of Sources and references for external ref for the disease*/
    private ArrayList<String> sourceList;
    private ArrayList<String> refList;
    /** List of names of genes for this disease */
    private ArrayList<String> genelist;
    /**list of gene orphanumbers**/
    private ArrayList<String> geneNum;
    /**list of gene xref sources */
    private ArrayList<String> gsources;
    /**list of gene xref references*/
    private ArrayList<String> grefs;
    /** List of external references count for genes. */
    private ArrayList<ExternalReference> xref_list;
    /** Parents (ids) */
    private ArrayList<String> isa_list=null;
    private boolean flag = true;

    public String get_orphanum() { return this.orphanum; }
    public void setOrphanum(String num) { this.orphanum = num; }
    public void setID (String id) { this.orphID = id; }

    public void addExpertLink(String link) { this.expert_link_list = link; 
    //System.out.println(expert_link_list); 
    }
    

    public void setName(String s) { this.name = s;}
    public String getName() { return this.name; }

   
    
    public void  setReference(String ref) { this.reference = ref; }
    public String getReference() { return this.reference ; }
  
    public void  setPrevalenceClass(String p) { this.prevalence = p; }
    public String getPrevalenceClass() { return this.prevalence ; }
    
    public void setAgeOfOnset (String onset){ this.ageOfOnset = onset;}
    public void setAgeOfDeath (String death) { this.ageOfDeath = death;}
    
    public void setSymbol (String symb){ this.symbol.add(symb);}
    
    
    public void setInheritance ( String inherit){
    	this.inheritance.add(inherit);
    	}
    
	
    public void setSynonym (String syn){
		this.synonym.add(syn);
	}

    public void add_genes(String genes) {
	
	    this.genelist.add(genes);
    }

    public void add_geneNum (String gnum){
    	this.geneNum.add(gnum);
    }
    
    public void addExternalReference(ExternalReference xr) {
	this. xref_list.add(xr);
    }

    public void addSource (String sr){
    	this.sourceList.add(sr);
    }
    
    public void addRef(String re){
    	this.refList.add(re);
    }
    
    public void setExRefCount(String erc){
    	//System.out.println("erc" + erc);
    	this.count.add(erc);
    }
    
    public void setGeneSource( String gs){
    	this.gsources.add(gs);
    	//System.out.println(gsources.isEmpty());
    }
    
    public void setGeneRefs(String gr){
    	this.grefs.add(gr);
    }
    
    public void add_is_a_link(String parnt) { this.isa_list.add(parnt); }


    public RareDisease() {
	//this.expert_link_list = new ArrayList<String> ();
	this.genelist = new ArrayList<String> ();
	this.xref_list = new  ArrayList<ExternalReference> ();
	this.isa_list = new ArrayList<String> ();
	this.inheritance = new ArrayList<String>();
	this.synonym = new ArrayList<String> ();
	this.sourceList = new ArrayList<String> ();
	this.refList = new ArrayList<String>();
	this.symbol = new ArrayList<String>();
	this.geneNum = new ArrayList<String>();
	this.gsources = new ArrayList<String>();
	this.grefs = new ArrayList<String> ();
	this.count= new ArrayList<String>();
    }

    
    public String getDXRString(HashMap<String,RareDisease> xrefs) {
	StringBuilder sb = new StringBuilder();
	sb.append("\n[Term]\n");
	sb.append("id: OrphaNum:" +  this.orphanum +  "\n");
	/*This if loop makes sure that the following parent classes are not classified under Unclassified Rare diseases*/
	if (this.orphanum.contentEquals("165711") || this.orphanum.contentEquals("98050") || this.orphanum.contentEquals("93419") ||
			this.orphanum.contentEquals("97929") || this.orphanum.contentEquals("98028") || this.orphanum.contentEquals("93890") ||
			this.orphanum.contentEquals("97978") || this.orphanum.contentEquals("97966")|| this.orphanum.contentEquals("97935")||
			this.orphanum.contentEquals("98053") || this.orphanum.contentEquals("96344")|| this.orphanum.contentEquals("97992") ||
			this.orphanum.contentEquals("57146")|| this.orphanum.contentEquals("98004")|| this.orphanum.contentEquals("68416")||
			this.orphanum.contentEquals("98047")|| this.orphanum.contentEquals("108999") || this.orphanum.contentEquals("68329")||
			this.orphanum.contentEquals("98006")||this.orphanum.contentEquals("98026")|| this.orphanum.contentEquals("250908")||
			this.orphanum.contentEquals("98036")||this.orphanum.contentEquals("98033")||this.orphanum.contentEquals("93626")||
			this.orphanum.contentEquals("97955")|| this.orphanum.contentEquals("89826") || this.orphanum.contentEquals("97965")||
			this.orphanum.contentEquals("97962") || this.orphanum.contentEquals("98023")||this.orphanum.contentEquals("101433")){
		  	this.flag = false;
	}
	sb.append("name:" + this.name + "\n");
	sb.append("comment: Orphanet ID- " + this.orphID + "\n");
	sb.append("comment: prevalence- " + this.prevalence + ";" + " AgeOfOnset- "+ this.ageOfOnset + ";"+ " AgeOfDeath-" + this.ageOfDeath + ";");
	if (! this.inheritance.isEmpty()){
		for (int i= 0; i< this.inheritance.size(); i++){
		sb.append(" Inheritance- "+ this.inheritance.get(i) + ";");}
	}
	/**the problem with the expert is link due to the fault in the XML file. Need to use amp not the symbol*/
	sb.append(" \ncomment: Expert Link -http://www.orpha.net/consor/cgi-bin/OC_Exp.php?lng=en&" + this.expert_link_list);
	
	/** printing out the genes comment*/
	int start = 0;
	if(! this.genelist.isEmpty()){
		for( int i =0; i<this.genelist.size(); i++){
			sb.append("\ncomment: Gene [OrphaNum:"+ this.geneNum.get(i)+ " ;  Name:" + this.genelist.get(i) + " ;  Symbol:" + this.symbol.get(i));
			int cnt = Integer.parseInt(this.count.get(i));
		if(!this.gsources.isEmpty()){
			for (int j= start; j< (cnt+start); j++){
				sb.append(" ; xref: " + this.gsources.get(j) +":" + this.grefs.get(j));
				 }
			}
			start = (cnt + start);
			sb.append("]");
		}
	}
	
	
	/**Printing out the synonyms of the disease*/
	if (! this.synonym.isEmpty()){
	for( int i=0; i< this.synonym.size(); i++){
	sb.append("\nsynonym: \""+ this.synonym.get(i).replaceAll("\"", "") +"\"  EXACT[]" );}}
	
	/**printing out the disease xrefs*/
	if (!this.sourceList.isEmpty()){
		for (int i=0; i<this.sourceList.size(); i++){
			sb.append("\nxref: " + this.sourceList.get(i) + ":" + this.refList.get(i) );
		}
		
	}
	//if (!this.isa_list.isEmpty()){
		for ( int i= 0; i<isa_list.size(); i++){
			sb.append("\nis_a: OrphaNum:" + this.isa_list.get(i) );
				}
	//}
	
	/* Classifies the floating classes under Unclasified rare diseases*/
	if (this.isa_list.isEmpty() && flag){
		sb.append("\nis_a: OrphaNum:000");
	}
		sb.append( "\n");
	
	return sb.toString();

    }


}